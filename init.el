(setq inhibit-startup-message t)(scroll-bar-mode -1)(tool-bar-mode -1)(tooltip-mode -1)(set-fringe-mode 10)(menu-bar-mode -1)(add-to-list 'default-frame-alist '(fullscreen . maximized))(global-set-key (kbd "<escape>") 'keyboard-escape-quit)(setq-default mode-line-format nil) (set-frame-parameter (selected-frame) 'alpha '(85 . 50)) (add-to-list 'default-frame-alist '(alpha . (85 . 50)))(set-face-attribute 'default nil :font "Iosevka Nerd Font Mono" :height 220 :weight 'medium) (require 'package)(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))(package-initialize)(unless (package-installed-p 'use-package)  (package-refresh-contents)  (package-install 'use-package))(eval-and-compile  (setq use-package-always-ensure t        use-package-expand-minimally t))(use-package gruvbox-theme  :ensure t  :config    (load-theme 'gruvbox-dark-soft t)  )(use-package evil  :ensure t  :init  (setq    evil-want-C-u-scroll t    evil-echo-state f  )  :config    (evil-mode 1)    (define-key evil-insert-state-map "jk" 'evil-normal-state)    (evil-set-leader 'nil (kbd "SPC"))  )(use-package counsel  :ensure t  :config  (ivy-mode 1))(use-package ivy-posframe  :ensure t  :config  (ivy-posframe-mode 1))(use-package all-the-icons  :ensure t)(use-package all-the-icons-ivy  :ensure t  :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup));;(use-pack;; age rainbow-delimiters-mode									        ;;;;   :ensure t												        ;;;;   :config)												        ;;;; 													        ;;;; (use-package beacon											        ;;;;   :ensure t												        ;;;;   :config												        ;;;;   (beacon-mode 1))											        ;;;; 													        ;;;; (use-package evil-collection										        ;;;;   :ensure t												        ;;;;   :config												        ;;;;   (evil-collection-init))										        ;;;; 													        ;;;; (use-package neotree											        ;;;;   :ensure t)												        ;;;; 													        ;;;; (use-package projectile										        ;;;;   :ensure t)												        ;;;; 													        ;;;; (use-package yasnippet										        ;;;;   :ensure t)												        ;;;; 													        ;;;; (use-package smartparens										        ;;;;   :ensure t												        ;;;;   :config												        ;;;;   (require 'smartparens-config)									        ;;;;   (smartparens-mode 1))										        ;;;; 													        ;;;; (use-package which-key										        ;;;;   :ensure t												        ;;;;   :config												        ;;;;   (which-key-mode 1))										        ;;;; 													        ;;;; (use-package org-bullets										        ;;;;   :ensure t												        ;;;;   :config												        ;;;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))					        ;;;; 													        ;;;; (use-package org-roam										        ;;;;   :ensure t												        ;;;;   :custom												        ;;;;   (org-roam-directory (file-truename "~/.org/"))							        ;;;;   :bind (("C-c n l" . org-roam-buffer-toggle)							        ;;;;          ("C-c n f" . org-roam-node-find)								        ;;;;          ("C-c n g" . org-roam-graph)								        ;;;;          ("C-c n i" . org-roam-node-insert)								        ;;;;          ("C-c n c" . org-roam-capture)								        ;;;;          ;; Dailies											        ;;;;          ("C-c n j" . org-roam-dailies-capture-today))						        ;;;;   :config												        ;;;;   ;; If you're using a vertical completion framework, you might want a more informative completion interface ;;;;   (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))      ;;;;   (org-roam-db-autosync-mode)									        ;;;;   ;; If using org-roam-protocol									        ;;;;   (require 'org-roam-protocol))									        ;;;; 													        ;;;; (use-package magit											        ;;;;   :ensure t)												        ;;;; 													        ;;;; (use-package magit-todos										        ;;;;   :ensure t)												        ;;;; 													        ;;;; (use-package evil-magit										        ;;;;   :ensure t)												        ;;;; 													        ;;;; (use-package dashboard										        ;;;;   :ensure t)												        ;;;; 													        ;;;; (use-package centaur-tabs										        ;;;;   :ensure t												        ;;;;   :config												        ;;;;   (centaur-tabs-mode t))										        ;;;;   													        ;;;; (use-package flycheck										        ;;;;   :ensure t)												        ;;;; 													        ;;;; (use-package iedit											        ;;;;   :ensure t)												        ;;;; 													        ;;;; (use-package lsp-mode										        ;;;;   :ensure t)												        ;;;; 													        ;;;; (use-package lsp-ui											        ;;;;   :ensure t)												        ;;;; 													        ;;;; (use-package dap-mode										        ;;;;   :ensure t)												        ;;